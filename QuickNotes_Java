
---------------------------- LOCAL/CLASS/INSTANCE VARIABLES -------------------------
Local variables are declared in methods, constructors, or blocks. Local variables are visible only within the declared method,
constructor, or block.
Class variables also known as Static variables are declared with the static keyword in a class, but outside a method,
constructor or a block. Static variables can be accessed by calling with the class name ClassName.VariableName.
Class variable has initial value by default:Zero for numbers, false for booleans, or null for object references.
Instance variables are declared in a class, but outside a method, constructor or any block. Instance variables are created
when an object is created with the use of the keyword 'new' and destroyed whenthe object is destroyed. Instance variable has
initial value by default:Zero for numbers, false for booleans, or null for object references.


----------------------------------------- OOPS(Object Oriented Programming System) --------------------------------------
OOP concepts in Java are the main ideas behind Java’s Object Oriented Programming. They are an abstraction, encapsulation,
inheritance, and polymorphism. Grasping them is key to understanding how Java works. Basically, Java OOP concepts let us
create working methods and variables, then re-use all or part of them without compromising security.

----------------------------------------- ABSTRACTION --------------------------------------
Abstraction is a process of hiding the implementation details from the user. Оnly the functionality will be provided to the
user. In Java, abstraction is achieved using abstract classes and interfaces.
A Java abstract class is a class which cannot be instantiated, meaning you cannot create objects of an abstract class.
The purpose of an abstract class is to function as a base for subclasses. In Java you declare that a class is abstract by
adding the abstract keyword to the class declaration. An abstract class can have abstract methods. You declare a method
abstract by adding the abstract keyword in front of the method declaration. 
An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon),
like this:
               abstract void moveTo(double deltaX, double deltaY);
If a class has an abstract method, the whole class must be declared abstract. Not all methods in an abstract class have to
be abstract methods. An abstract class can have a mixture of abstract and non-abstract methods.
Abstract methods - undefined actions/methods.
Concrete methods - finished actions/methods.

----------------------------------------- INTERFACES --------------------------------------
Abstract class is used for achieving partial abstraction. Unlike abstract class an interface is used for full abstraction.
Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user.
Interface looks like a class but it is not a class. But,like abstract class, you cannot create an object of interface.
To achieve this, intitially you have to create class which implements that interface then you can create an object of class
which implements interface. An interface can have methods and variables just like the class but the methods declared in
interface are by default abstract (only method signature, no body). 
Since methods in interfaces do not have body, they have to be implemented by the class before you can access them.
The class that implements interface must implement all the methods of that interface. Also, java programming language
does not allow you to extend more than one class, However you can implement more than one interfaces in your class. Also,
the variables declared in an interface are public, static & final by default.
You can also define method by only using defult keyword.

----------------------------------------- OBJECT --------------------------------------
A Java object is a combination of data and procedures working on the available data. An object has a state and behavior.
The state of an object is stored in fields (variables), while methods (functions) display the object's behavior.
Objects are created from templates known as classes. In Java, an object is created using the keyword "new".

------------------------------------- ANONYMOUS OBJECT ----------------------------------
Whenever an object is instantiated but is not assigned a reference variable, it is called anonymous object instantiation.

     Simple object instantiation:
     Sample s = new Sample();

     Anonymous object instantiation:
     new Sample();

The anonymous object is created and dies instantaneously. But, still  with anonymous objects work can be extracted before
it dies like calling a method using the anonymous object:

     new Sample().display()

The anonymous object can be used only once in the program.  We can’t use  twice or more as the anonymous object dies
immediately after doing its  assigned task. 

-------------------------------- METHOD OVERRIDING --------------------------------
When you have two methods with the same name and same number of parameters and they both belong to 2 different classes
but those classes are linked with the concept of inheritance, this is called Method overloading.
You can also call it as Runtime Polymorphism, Late Binding, Dynamic Binding.

---------------------------------  FINAL KEYWORD ----------------------------------
Final Variable: Once final variable is assigned, you cannot change it.
Final Method: You cannot override final method, but you can overload it.
Final Class: You can not inherit properties(variables and methods) from final class.

----------------------------------  SUPER KEYWORD ----------------------------------
super keyword is used to access Superclass Members. It can be variable, method or constructor.
super() must be the first statement in Child Class constructor. With super(), the superclass no-argument constructor is called.
With super(parameter list), the superclass constructor with a matching parameter list is called. With super(), the superclass
no-argument constructor is called. With super(parameter list), the superclass constructor with a matching parameter list is
called. If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts a call to
the no-argument constructor of the superclass.

----------------------------------  THIS KEYWORD ----------------------------------
this keyword in java can be used inside the Method or constructor of  Class. It(this) works as a reference to the current
Object, whose Method or constructor is being invoked. This keyword can be used to refer to any member of the current object
from within an instance Method or a constructor.

----------------------------- DMD(Dynamic Method Dispatch) -------------------------
Child extesnds Parent

Parent p = new Parent();
Child c = new Child();
YES --> Parent = new Child(); --> Upcasting 
NO  --> Child c = new Parent(); --> Incompatible type(X)

*** When Parent class reference variable refers to Child class object, it is known as Upcasting

----------------------------------- STATIC KEYWORD -----------------------------------
When a member is declared static, it can be accessed without creating an object. Since static variables belong to a class,
they can be accessed directly using class name and don’t need any object reference. It is executed before the main method at
the time of classloading.
In java, when you want to call one particular method in a class, you need to create object of that class but if you use 
"static" keyword with your method, you don't need to create object, you can just call by class name like that: Abc.show();
Non static variables cannot be used in static method! 
