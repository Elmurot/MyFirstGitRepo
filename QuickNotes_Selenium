===============================Capture Screenshot in Selenium WebDriver using FileHandler Class===============================
In the latest version of Selenium, FileHandler class is implemented to capture screenshot instead of FileUtils.
We have to import package “org.openqa.selenium.io.FileHandler” to work with FileHandler class

	    TakesScreenshot ts=(TakesScreenshot)driver;
	    FileHandler.copy(ts.getScreenshotAs(OutputType.FILE), new File("C:\\Selenium Project\\CaptureScreenshot.png"));

Before Selenium 3.6.0, Apache Commons Library comes along with Selenium. But in Selenium new versions from Selenium 3.6.0
onwards, we have to download it separately to use it in our project. You can download it from https://commons.apache.org/

If you are using Maven Project, here is the dependency of Apache Commons Library

<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-io -->
<dependency>
<groupId>org.apache.commons</groupId>
<artifactId>commons-io</artifactId>
<version>1.3.2</version>
</dependency>
===============================================================================================================================
===========================WebDriver driver = new FirefoxDriver() ? Why we write in Selenium Scripts===========================
SearchContext(findElement(),findElements()) is the super interface in selenium, which is extended by another interface called
WebDriver(get(),close()). All the abstract methods of SearchContext and WebDriver interfaces are implemented in RemoteWebDriver
class. All the browser related classes such as FirefoxDriver, ChromeDriver etc., extends the RemoteWebdriver class.

WebDriver is an interface, driver is a reference variable, FirefoxDriver() is a Constructor, new is a keyword, and
new FirefoxDriver() is an Object. We cannot write our code like this (WebDriver driver = new WebDriver();) because we
cannot create Object of an Interface.

But we can use any of the following statements in our script

ChromeDriver driver = new ChromeDriver();
If you want to run you scripts only in one browser then it's totally fine to use above statement but in testing cross browser
testing is also very important.

If we want to run our automation scripts on the remote machine’s browser then we use RemoteWebDriver. RemoteWebDriver requires
the Selenium Standalone Server to be running but to use other drivers Selenium Standalone Server is not required.
===============================================================================================================================

If you save your driver in this specific place: /usr/local/bin
You don't have to write System.set.property in your class.

What Is The Difference Between Assert And Verify In Selenium?

In simple words, if the assert condition is true then the program control will execute the next test step but if
the condition is false, the execution will stop and further test step will not be executed.
To overcome this we use Soft Assert in TestNG.


In simple words, there wont be any halt in the test execution even though the verify condition is true or false.
Note: In TestNG, we use only Assert Statements.  We can use Verify statement in terms of if-else and try-catch.
Verify is also a command which works with Selenium IDE and you have soft assert in TestNG, so both are same.
Since Selenium IDE is a just record and play tool so I would suggest you can continue with Webdriver with TestNG.




Asserts are used to perform validations in the test scripts.

There are two types of Assert:

Hard Assert
Soft Assert

Hard Assert – Hard Assert throws an AssertException immediately when an assert statement fails and test suite continues with
next @Test
The disadvantage of Hard Assert – It marks method as fail if assert condition gets failed and the remaining statements
inside the method will be aborted. To overcome this we need to use Soft Assert. 

Soft Assert – Soft Assert collects errors during @Test. Soft Assert does not throw an exception when an assert fails and
would continue with the next step after the assert statement.

If there is any exception and you want to throw it then you need to use assertAll() method as a last statement in the @Test
and test suite again continue with next @Test as it is.
assertAll() is used to mark the test case as failed, if any soft assertion is getting failed.

We need to create an object to use Soft Assert which is not needed in Hard Assert.



import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
 
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
public class WriteExcel {
 
 public static void main (String [] args) throws IOException{
 //create an object of Workbook and pass the FileInputStream object into it to create a pipeline between the sheet and eclipse.
 FileInputStream fis = new FileInputStream("D:\\Test.xlsx");
 XSSFWorkbook workbook = new XSSFWorkbook(fis);
 //call the getSheet() method of Workbook and pass the Sheet Name here. 
 //In this case I have given the sheet name as “TestData” 
                //or if you use the method getSheetAt(), you can pass sheet number starting from 0. Index starts with 0.
 XSSFSheet sheet = workbook.getSheet("TestData");
 //XSSFSheet sheet = workbook.getSheetAt(0);
 //Now create a row number and a cell where we want to enter a value. 
 //Here im about to write my test data in the cell B2. It reads Column B as 1 and Row 2 as 1. Column and Row values start from 0.
 //The below line of code will search for row number 2 and column number 2 (i.e., B) and will create a space. 
                //The createCell() method is present inside Row class.
                Row row = sheet.createRow(1);
 Cell cell = row.createCell(1);
 //Now we need to find out the type of the value we want to enter. 
                //If it is a string, we need to set the cell type as string 
                //if it is numeric, we need to set the cell type as number
 cell.setCellType(cell.CELL_TYPE_STRING);
 cell.setCellValue("SoftwareTestingMaterial.com");
 FileOutputStream fos = new FileOutputStream("D:\\Test.xlsx");
 workbook.write(fos);
 fos.close();
 System.out.println("END OF WRITING DATA IN EXCEL");
 }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
 
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
//How to read excel files using Apache POI
public class ReadExcel {
 public static void main (String [] args) throws IOException{
                        //I have placed an excel file 'Test.xlsx' in my D Driver 
 FileInputStream fis = new FileInputStream("D:\\Test.xlsx");
 XSSFWorkbook workbook = new XSSFWorkbook(fis);
 XSSFSheet sheet = workbook.getSheetAt(0);
                        //I have added test data in the cell A1 as "SoftwareTestingMaterial.com"
                        //Cell A1 = row 0 and column 0. It reads first row as 0 and Column A as 0.
 Row row = sheet.getRow(0);
 Cell cell = row.getCell(0);
                       System.out.println(cell);
 System.out.println(sheet.getRow(0).getCell(0));
 //String cellval = cell.getStringCellValue();
 //System.out.println(cellval);
 
 } 
}

